<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jason Blog</title><link href="/" rel="alternate"></link><link href="/feeds/jason.atom.xml" rel="self"></link><id>/</id><updated>2014-09-27T23:18:01+02:00</updated><entry><title>github 多個帳號ssh key</title><link href="/github-duo-ge-zhang-hao-ssh-key.html" rel="alternate"></link><updated>2014-09-27T23:18:01+02:00</updated><author><name>Jason</name></author><id>tag:,2014-09-27:github-duo-ge-zhang-hao-ssh-key.html</id><summary type="html">&lt;p&gt;場景：有多個github賬號，比如公司一個，私人一個。現在想在同一台主機上同時維護公司的和私人的repo
大家可能會嘗試把一個公鑰貼到兩個github賬戶，實踐告訴我們&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Key is already in use
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;解決辦法：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;生成第二個key ssh-keygen -t rsa  -f ~/.ssh/id_rsa.est&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;編輯ssh_config vim ~/.ssh/config 粘貼下邊的東東：
Host estgit
HostName github.com
User git
IdentityFile "~/.ssh/id_rsa.est"
IdentitiesOnly yes
　&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;用這個方式來操作git：git clone estgit:/username/repo ，或者編輯 .git/config 裡邊的 remote - url&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;git：git clone estgit:/username/repo 中的 estgit 需要跟 ~/.ssh/config 裡面的 Host 名稱 estgit 一致&lt;/p&gt;
&lt;p&gt;用這個方式來操作git：git clone estgit:/username/repo ，或者編輯 .git/config 裡邊的 remote - url
原理就是，指定一個ssh的Host的單獨IdentityFile，然後因為git是基於ssh的，所以用Host名稱連接github.com就會用那個單獨的公鑰了。&lt;/p&gt;</summary><category term="github"></category></entry><entry><title>資料傳輸速率計算</title><link href="/zi-liao-chuan-shu-su-lu-ji-suan.html" rel="alternate"></link><updated>2014-09-27T00:37:54+02:00</updated><author><name>Jason</name></author><id>tag:,2014-09-27:zi-liao-chuan-shu-su-lu-ji-suan.html</id><summary type="html">&lt;p&gt;數據通信中用以描述資料傳輸速率有三個名詞：鮑速率(baud rate)、資料速率(data rate)、以及有效資料速率(effective data rate)。&lt;/p&gt;
&lt;h3&gt;(1) 鮑速率&lt;/h3&gt;
&lt;p&gt;鮑速率為傳每秒所送信號變化的次數，包括了頻率、相位、振幅以及它們的混合等型態的變化，可以用一個信號時距(Ts)來代表一個位元的傳輸時間，故鮑速率可寫成：
鮑速率 = 1 / Ts
例如某電傳系統中的鮑速率為1200鮑(baud)，則每傳送一個鮑需要0.83mS，若一個鮑僅調變一個位元，則鮑率與以下所講的資料速率相等。&lt;/p&gt;
&lt;h3&gt;(2) 資料速率&lt;/h3&gt;
&lt;p&gt;資料傳輸調變系統中若採用了混合調變或多位元調變，鮑速率已不足以代表資料傳輸速率，正確的計算應該是：
資料速率 = 鮑率 × 位元數 (bps)
舉例來說，某鮑速率為2400的調幅傳輸系統中，調幅階層變化有256種，表示它可以一次送出8個位元，因此資料速率為2400×8=19200 (bps)，bps就是每秒傳輸的位元數。&lt;/p&gt;
&lt;h3&gt;(3) 有效資料速率&lt;/h3&gt;
&lt;p&gt;串列傳輸時都會在資料串前後加入一些其他的訊息，有效資料速率是指扣除這些額外訊息後，實際傳輸資料的速率。
有效資料速率 =
資料速率 × 資料位元數 / 資料格式所有位元數
例如一個資料速率為19200 bps的系統以N/8/1非同步格式傳輸，那麼START、STOP各為1位元，資料為8位元，因此
有效資料速率 = 19200 × 8 / (1+8+1) = 15360 (bps)&lt;/p&gt;
&lt;p&gt;有效資料速率 = 19200 × 8 / (1+8+1) = 15360 (bps) // 這樣計算方式是因為處理一個8bit 實際上要花10bit 多了 start and stop , 所以 19200(bps) 實際上每秒只能處理 15360(bps)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;參考 http://www.ltivs.ilc.edu.tw/kocp/mpu/m7/m7-3-4.htm&lt;/li&gt;
&lt;/ul&gt;</summary><category term="protocol"></category></entry><entry><title>安裝 OpenCV 2.4.9</title><link href="/an-zhuang-opencv-249.html" rel="alternate"></link><updated>2014-09-26T19:44:51+02:00</updated><author><name>Jason</name></author><id>tag:,2014-09-26:an-zhuang-opencv-249.html</id><summary type="html">&lt;h3&gt;install package&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install build-essential libgtk2.0-dev libjpeg-dev libtiff4-dev libjasper-dev libopenexr-dev cmake python-dev python-numpy python-tk libtbb-dev libeigen2-dev yasm libfaac-dev libopencore-amrnb-dev libopencore-amrwb-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev libqt4-dev libqt4-opengl-dev sphinx-common texlive-latex-extra libv4l-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;download opencv-2.4.9&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wget -O OpenCV-2.4.9.zip http://fossies.org/linux/misc/opencv-2.4.9.zip
unzip OpenCV-2.4.9.zip
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;build&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;opencv-2.4.9
mkdir debug ; &lt;span class="nb"&gt;cd &lt;/span&gt;debug
cmake -D &lt;span class="nv"&gt;CMAKE_INSTALL_PREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/opencv -D CMAKE_BUILD_TYPE:STRING&lt;span class="o"&gt;=&lt;/span&gt;RelWithDebInfo -D &lt;span class="nv"&gt;CMAKE_BUILD_TYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;DEBUG ..
make -j8 ; sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;add library path&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo vim /etc/ld.so.conf.d/opencv.conf
/usr/local/opencv/lib
sudo ldconfig
ldconfig -p | ag &lt;span class="s1"&gt;&amp;#39;opencv&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;bashrc configure&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;~/.bashrc
&lt;span class="nv"&gt;PKG_CONFIG_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PKG_CONFIG_PATH&lt;/span&gt;:/usr/local/opencv/lib/pkgconfig
&lt;span class="nb"&gt;export &lt;/span&gt;PKG_CONFIG_PATH
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;test&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;opencv-2.4.9/samples/c
./build_all.sh
./facedetect lena.jpg
&lt;/pre&gt;&lt;/div&gt;</summary><category term="opencv"></category></entry><entry><title>使用Pelican建立Blog</title><link href="/shi-yong-pelicanjian-li-blog.html" rel="alternate"></link><updated>2014-09-26T19:28:04+02:00</updated><author><name>Jason</name></author><id>tag:,2014-09-26:shi-yong-pelicanjian-li-blog.html</id><summary type="html">&lt;p&gt;1.1 安裝Pelican&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install virtualenv
virtualenv pelican_env
&lt;span class="nb"&gt;source &lt;/span&gt;pelican_env/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安裝pelican工具&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install pelican markdown ghp-import
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;1.2 建立 Github Page
* 在Github上創建一個倉庫，倉庫名是用戶名.github.io，注意這裡的用戶名是自己的用戶名&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立好後，clone 到 local&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/xxxx/xxx.github.io
&lt;span class="nb"&gt;cd &lt;/span&gt;xxx.github.io
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.1 建立 Pelican Blog
建立 source branch&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git checkout -b &lt;span class="nb"&gt;source&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;建立 Pelican&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;建立的過程中，會問你一些問題，你可以參考下面的回答。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt; Where &lt;span class="k"&gt;do &lt;/span&gt;you want to create your new web site? &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; What will be the title of this web site? Buttermilch
&amp;gt; Who will be the author of this web site? Tony Stark
&amp;gt; What will be the default language of this web site? &lt;span class="o"&gt;[&lt;/span&gt;en&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to &lt;span class="nb"&gt;enable &lt;/span&gt;article pagination? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; How many articles per page &lt;span class="k"&gt;do &lt;/span&gt;you want? &lt;span class="o"&gt;[&lt;/span&gt;10&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; Do you want to generate a Fabfile/Makefile ... and publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP ... and site development? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using FTP? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using SSH? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using Dropbox? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using S3? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.1.1 安裝 theme 跟 plugins&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/jakevdp/pelican-octopress-theme.git
git clone https://github.com/getpelican/pelican-plugins.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;將 pelicanconf.py 檔案裡的 THEME 跟 PLUGIN_PATH 修改成你放置 pelican-octopress-theme 跟 pelican-plugins 的路徑：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;import os ＃ 新增
&lt;span class="nv"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; os.path.join&lt;span class="o"&gt;(&lt;/span&gt;os.environ.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HOME&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;pelican&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%s/pelican-octopress-theme&amp;#39;&lt;/span&gt; % path
&lt;span class="nv"&gt;PLUGIN_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%s/pelican-plugins&amp;#39;&lt;/span&gt; % path
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.2 建立Markdown文章&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Title: 你好，世界！
Date: 2014-09-26 16:08
Category: Python
Tags: python
Author: Jason
Summary: 你好，世界！
你好，世界，世界，你好。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.3 Local test
編寫好了之後，就可以在本地進行測試了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pelican content -s pelicanconf.py --ignore-cache
&lt;span class="nb"&gt;cd &lt;/span&gt;output
python -m SimpleHTTPServer 1111
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.4 提交更改&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git add .
git commit -m &lt;span class="s2"&gt;&amp;quot;initial commit&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.5 發佈&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git branch gh-pages
ghp-import output
git checkout master
git merge gh-pages
git push --all
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.6 之後修改文章只需下面步驟即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git checkout &lt;span class="nb"&gt;source&lt;/span&gt;
新增修改文章
git add .
git commit -m &lt;span class="s2"&gt;&amp;quot;update&amp;quot;&lt;/span&gt;
ghp-import output
git checkout master
git merge gh-pages
git push --all
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Pelican"></category></entry><entry><title>SPI、I2C、I2S、UART、CAN、SDIO、GPIO的介绍</title><link href="/spi-i2c-i2s-uart-can-sdio-gpiode-jie-shao.html" rel="alternate"></link><updated>2014-09-26T18:48:28+02:00</updated><author><name>Jason</name></author><id>tag:,2014-09-26:spi-i2c-i2s-uart-can-sdio-gpiode-jie-shao.html</id><summary type="html">&lt;h3&gt;SPI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SPI(Serial Peripheral Interface)是MOTOROLA公司提出的同步串行總線方式。高速同步串行口。&lt;/li&gt;
&lt;li&gt;3~4線接口，收發獨立、可同步進行. &lt;/li&gt;
&lt;li&gt;因其硬件功能強大而被廣泛應用。在單片機組成的智能儀器和測控系統中。如果對速度要求不高,採用SPI總線模式是個不錯的選擇。它可以節省I/O端口,提高外設的數目和系統的性能。標準SPI總線由四根線組成：串行時鐘線(SCK)、主機輸入/從機輸出線(MISO)。主機輸出/從機輸入線(MOSI)和片選信號(CS)。有的SPI接口芯片帶有中斷信號線或沒有MOSI。
    SPI總線由三條信號線組成：串行時鐘(SCLK)、串行數據輸出(SDO)、串行數據輸入(SDI)。SPI總線可以實現多個SPI設備互相連接。提供SPI串行時鐘的SPI設備為SPI主機或主設備(Master)，其他設備為SPI從機或從設備(Slave)。主從設備間可以實現全雙工通信，當有多個從設備時，還可以增加一條從設備選擇線。如果用通用IO口模擬SPI總線，必須要有一個輸出口(SDO)，一個輸入口(SDI)，另一個口則視實現的設備類型而定，如果要實現主從設備，則需輸入輸出口，若只實現主設備，則需輸出口即可，若只實現從設備，則只需輸入口即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;I2C&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I2C: (Inter－Integrated Circuit)總線是一種由PHILIPS公司開發的兩線式串行總線，用於連接微控制器及其外圍設備.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I2C總線用兩條線(SDA和SCL)在總線和裝置之間傳遞信息，在微控制器和外部設備之間進行串行通訊或在主設備和從設備之間的雙向數據傳送。I2C是OD輸出的，大部分I2C都是2線的（時鐘和數據），一般用來傳輸控制信號。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;I2C是多主控總線，所以任何一個設備都能像主控器一樣工作，並控制總線。總線上每一個設備都有一個獨一無二的地址，根據設備它們自己的能力，它們可以作為發射器或接收器工作。多路微控制器能在同一個I2C總線上共存。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;I2S&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I2S（Inter-IC Sound Bus）是飛利浦公司為數字音頻設備之間的音頻 數據傳輸而制定的一種總線標準。 I2S則大部分是3線的（除了時鐘和數據外，還有一個左右聲道的選擇信號），I2S主要用來傳輸音頻信號。如STB、DVD、MP3等常用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;UART&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;UART：通用異步串行口。按照標準波特率完成雙向通訊，速度慢. &lt;/li&gt;
&lt;li&gt;UART總線是異步串口，因此一般比前兩種同步串口的結構要複雜很多，一般由波特率產生器(產生的波特率等於傳輸波特率的16倍)、UART接收器、UART發送器組成，硬件上由兩根線，一根用於發送，一根用於接收。&lt;/li&gt;
&lt;li&gt;UART是用於控制計算機與串行設備的芯片。有一點要注意的是，它提供了RS-232C數據終端設備接口，這樣計算機就可以和調制解調器或其它使用RS-232C接口的串行設備通信了 。作為接口的一部分，UART還提供以下功能： 
   將由計算機內部傳送過來的並行數據轉換為輸出的串行數據流。將計算機外部來的串行 
數據轉換為字節，供計算機內部使用並行數據的器件使用。在輸出的串行數據流中加入 
奇偶校驗位，並對從外部接收的數據流進行奇偶校驗。在輸出數據流中加入啟停標記， 
並從接收數據流中刪除啟停標記。處理由鍵盤或鼠標發出的中斷信號（鍵盤和鼠標也是 
串行設備）。可以處理計算機與外部串行設備的同步管理問題。有一些比較高檔的UART 
還提供輸入輸出數據的緩衝區，現在比較新的UART是16550，它可以在計算機需要處理數 
據前在其緩衝區內存儲16字節數據，而通常的UART是8250。現在如果您購買一個內置的 
調制解調器，此調制解調器內部通常就會有16550 UART。 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GPIO&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GPIO (General Purpose Input Output 通用輸入/輸出)或總線擴展器利用工業標準I²C、SMBus™或SPI™接口簡化了I/O口的擴展。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;當微控制器或芯片組沒有足夠的I/O端口，或當系統 需要採用遠端串行通信或控制時，GPIO產品能夠提供額外的控制和監視功能。每個GPIO端口可通過軟件分別配置成輸入或輸出。Maxim的GPIO產品線包括8端口至28端口的GPIO，提供推挽式輸出或漏極開路輸出。提供微型3mm x 3mm QFN封裝。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;GPIO的優點(端口擴展器)
低功耗：GPIO具有更低的功率損耗(大約1μA，μC的工作電流則為100μA)。
集成IIC從機接口：GPIO內置IIC從機接口，即使在待機模式下也能夠全速工作。
小封裝：GPIO器件提供最小的封裝尺寸 ─ 3mm x 3mm QFN!
低成本：您不用為沒有使用的功能買單！
快速上市：不需要編寫額外的代碼、文檔，不需要任何維護工作！
靈活的燈光控制：內置多路高分辨率的PWM輸出。
可預先確定響應時間：縮短或確定外部事件與中斷之間的響應時間。
更好的燈光效果：匹配的電流輸出確保均勻的顯示亮度。
布線簡單：僅需使用2條IIC總線或3條SPI總線&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;SDIO&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SDIO是SD型的擴展接口，除了可以接SD卡外，還可以接支持SDIO接口的設備，插口的用途不止是插存儲卡。支持 SDIO接口的PDA，筆記本電腦等都可以連接象GPS接收器，Wi-Fi或藍牙適配器，調制解調器，局域網適配器，條型碼讀取器，FM無線電，電視接收 器，射頻身份認證讀取器，或者數碼相機等等採用SD標準接口的設備。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;CAN&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CAN，全稱為「Controller Area Network」，即控制器局域網，是國際上應用最廣泛的現場總線之一。最初，CAN被設計作為汽車環境中的微控制器通訊，在車載各電子控制裝置ECU之 間交換信息，形成汽車電子控制網絡。比如：發動機管理系統、變速箱控制器、儀表裝備、電子主幹系統中，均嵌入CAN控制裝置。
一個由CAN 總線構成的單一網絡中，理論上可以掛接無數個節點。實際應用中，節點數目受網絡硬件的電氣特性所限制。例如，當使用Philips P82C250作為CAN收發器時，同一網絡中允許掛接110個節點。CAN 可提供高達1Mbit/s的數據傳輸速率，這使實時控制變得非常容易。另外，硬件的錯誤檢定特性也增強了CAN的抗電磁干擾能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;什麼是CSMA/CD ?&lt;/h3&gt;
&lt;p&gt;CSMA/CD是「載波偵聽多路訪問/衝突檢測」（Carrier Sense Multiple Access with Collision Detect）的縮寫。
利 用CSMA訪問總線，可對總線上信號進行檢測，只有當總線處於空閒狀態時，才允許發送。利用這種方法，可以允許多個節點掛接到同一網絡上。當檢測到一個沖 突位時，所有節點重新回到『監聽』總線狀態，直到該衝突時間過後，才開始發送。在總線超載的情況下，這種技術可能會造成發送信號經過許多延遲。為了避免發 送時延，可利用CSMA/CD方式訪問總線。當總線上有兩個節點同時進行發送時，必須通過「無損的逐位仲裁」方法來使有最高優先權的的報文優先發送。在 CAN總線上發送的每一條報文都具有唯一的一個11位或29位數字的ID。CAN總線狀態取決於二進制數『0』而不是『1』，所以ID號越小，則該報文擁 有越高的優先權。因此一個為全『0』標誌符的報文具有總線上的最高級優先權。可用另外的方法來解釋：在消息衝突的位置，第一個節點發送0而另外的節點發送 1，那麼發送0的節點將取得總線的控制權，並且能夠成功的發送出它的信息。&lt;/p&gt;
&lt;p&gt;CAN的高層協議（也可理 解為應用層協議）是一種在現有的底層協議（物理層和數據鏈路層）之上實現的協議。高層協議是在CAN規範的基礎上發展起來的應用層。許多系統（像汽車工 業）中，可以特別制定一個合適的應用層，但對於
許多的行業來說，這種方法是不經濟的。一些組織已經研究並開放了應用層標準，以使系統的綜合應用變得十分容 易。
一些可使用的CAN高層協議有：
制定組織 主要高層協議
- CiA           CAL協議
- CiA           CANOpen協議
- DeviceNet 協議
- Honeywell  SDS 協議
- Kvaser       CANKingdom協議&lt;/p&gt;
&lt;p&gt;什麼是標準格式CAN和擴展格式CAN?
標準CAN的標誌符長度是11位，而擴展格式CAN的標誌符長度可達29位。CAN 協議的2.0A版本規定CAN控制器必須有一個11位的標誌符。同時，在2.0B版本中規定，CAN控制器的標誌符長度可以是11位或29位。遵循 CAN2.0B協議的CAN控制器可以發送和接收11位標識符的標準格式報文或29位標識符的擴展格式報文。如果禁止CAN2.0B,則CAN 控制器只能發送和接收11位標識符的標準格式報文，而忽略擴展格式的報文結構，但不會出現錯誤。
目前，Philips公司主要推廣的CAN獨立控制器均支持CAN2.0B協議，即支持29位標識符的擴展格式報文結構。&lt;/p&gt;</summary><category term="python"></category></entry><entry><title>helper script</title><link href="/helper-script.html" rel="alternate"></link><updated>2014-09-25T02:49:09+02:00</updated><author><name>Jason</name></author><id>tag:,2014-09-25:helper-script.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c"&gt;# Author: Hsin-Yi Chen &amp;lt;ossug.hychen AT gmail.com&amp;gt;&lt;/span&gt;
&lt;span class="nv"&gt;ERRMSG_WRONGDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;You are not under octopress directory&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; ! -f _config.yml &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ERRMSG_WRONGDIR&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;

&lt;span class="nv"&gt;BLOGDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PWD&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;

deploy&lt;span class="o"&gt;(){&lt;/span&gt;
    git checkout &lt;span class="nb"&gt;source&lt;/span&gt;
&lt;span class="nb"&gt;    &lt;/span&gt;git push origin &lt;span class="nb"&gt;source&lt;/span&gt;
&lt;span class="nb"&gt;    &lt;/span&gt;rake generate
    rake deploy
&lt;span class="o"&gt;}&lt;/span&gt;

update_octopress&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;upgrading octopress source&amp;#39;&lt;/span&gt;
    git pull octopress master     &lt;span class="c"&gt;# Get the latest Octopress&lt;/span&gt;
    bundle install                &lt;span class="c"&gt;# Keep gems updated&lt;/span&gt;
    rake update_source            &lt;span class="c"&gt;# update the template&amp;#39;s source&lt;/span&gt;
    rake update_style             &lt;span class="c"&gt;# update the template&amp;#39;s style&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

preview&lt;span class="o"&gt;(){&lt;/span&gt;
    rake preview &amp;amp;
    sleep 1
    sensible-browser 127.0.0.1:4000
&lt;span class="o"&gt;}&lt;/span&gt;

upgrade&lt;span class="o"&gt;(){&lt;/span&gt;
    update_octopress
    deploy
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# start to write new post&lt;/span&gt;
&lt;span class="c"&gt;# @param: post title&lt;/span&gt;
post&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;requires title&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
    _new_item post &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# start to write new page&lt;/span&gt;
&lt;span class="c"&gt;# @param: page title&lt;/span&gt;
page&lt;span class="o"&gt;(){&lt;/span&gt;
    _new_item page &lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

_new_item&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;tmpfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;mktemp&lt;span class="sb"&gt;`&lt;/span&gt;
    &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;item_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;requires item name&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;2&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;requires title&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
    rake new_&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;item_name&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\&amp;quot;${title}\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; | tee &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;tmpfile&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;cat &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;tmpfile&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; | awk -F: &lt;span class="s1"&gt;&amp;#39;{print $2}&amp;#39;&lt;/span&gt; | sed -e &lt;span class="s1"&gt;&amp;#39;s/ //&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
    sensible-editor &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BLOGDIR&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/&lt;span class="nv"&gt;$file&lt;/span&gt;
    rm &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;tmpfile&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
    &lt;span class="c"&gt;# return file name&lt;/span&gt;
    &lt;span class="nv"&gt;RET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Main&lt;/span&gt;
&lt;span class="c"&gt;# ----&lt;/span&gt;
&lt;span class="nv"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;post upgrade preview deploy&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;requirs action!, avaliabl actions are ${actions}&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# run action&lt;/span&gt;
&lt;span class="nb"&gt;shift&lt;/span&gt;
&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;action&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category></entry><entry><title>sed 刪除空行</title><link href="/sed-shan-chu-kong-xing.html" rel="alternate"></link><updated>2014-08-22T16:08:00+02:00</updated><author><name>Jason</name></author><id>tag:,2014-08-22:sed-shan-chu-kong-xing.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/^&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="sed"></category></entry></feed>