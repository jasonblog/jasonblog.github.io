<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jason Blog</title><link>/</link><description></description><atom:link href="/feeds/jason.rss.xml" rel="self"></atom:link><lastBuildDate>Fri, 10 Oct 2014 13:50:49 +0800</lastBuildDate><item><title>[轉] SPI,UART,I2C都有什麼區別，及其各自的特點</title><link>/zhuan-spiuarti2cdu-you-shi-mo-qu-bie-ji-qi-ge-zi-de-te-dian.html</link><description>&lt;p&gt;區別:
SPI：高速同步串列口。3～4線介面，收發獨立、可同步進行
UART：通用非同步串列口。按照標準串列傳輸速率完成雙向通訊，速度慢
I2C:一種序列傳輸方式,三線制,網上可找到其通信協議和用法的&lt;/p&gt;
&lt;p&gt;3根線實現資料雙向傳輸
串列週邊介面 Serial peripheral interface
UART:通用非同步收發器
UART是用於控制電腦與串列設備的晶片。有一點要注意的是，它提供了RS-232C資料終端設備介面，這樣電腦就可以和數據機或其它使用RS-232C介面的串列設備通信了。作為介面的一部分，UART還提供以下功能：
將由電腦內部傳送過來的並行資料轉換為輸出的串列資料流程。將電腦外部來的串列資料轉換為位元組，供電腦內部使用並行資料的器件使用。在輸出的串列資料流程中加入同位檢查位元，並對從外部接收的資料流程進行同位。在輸出資料流程中加入啟停標記，並從接收資料流程中刪除啟停標記。處理由鍵盤或滑鼠發出的中斷信號（鍵盤和鼠票也是串列設備）。可以處理電腦與外部串列設備的同步管理問題。有一些比較高檔的UART還提供輸入輸出資料的緩衝區，現在比較新的UART是16550，它可以在電腦需要處理資料前在其緩衝區內存儲16位元組資料，而通常的UART是8250。現在如果您購買一個內置的數據機，此數據機內部通常就會有16550 UART。
I2C:能用於替代標準的平行匯流排，能連接的各種積體電路和功能模組。I2C是多主控匯流排，所以任何一個設備都能像主控器一樣工作，並控制匯流排。 匯流排上每一個設備都有一個獨一無二的位址，根據設備它們自己的能力，它們可以作為發射器或接收器工作。多路微控制器能在同一個I2C匯流排上共存。&lt;/p&gt;
&lt;p&gt;更詳細的區別：
第一個區別當然是名字：
     SPI(Serial Peripheral Interface：串列外設介面);
     I2C(INTER IC BUS：意為IC之間匯流排)
     UART(Universal Asynchronous Receiver Transmitter：通用非同步收發器)
第二，區別在電氣信號線上：
     SPI匯流排由三條信號線組成：串列時鐘(SCLK)、串列資料輸出(SDO)、串列資料登錄(SDI)。SPI匯流排可以實現 多個SPI設備互相連接。提供SPI串列時鐘的SPI設備為SPI主機或主設備(Master)，其他設備為SPI從機或從設備(Slave)。主從設備間可以實現全雙工通信，當有多個從設備時，還可以增加一條從設備選擇線。
     如果用通用IO口類比SPI匯流排，必須要有一個輸出口(SDO)，一個輸入口(SDI)，另一個口則視實現的設備類型而定，如果要實現主從設備，則需輸入輸出口，若只實現主設備，則需輸出口即可，若只實現從設備，則只需輸入口即可。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="n"&gt;I2C&lt;/span&gt;&lt;span class="err"&gt;匯流排是雙向、兩線&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SCL&lt;/span&gt;&lt;span class="err"&gt;、&lt;/span&gt;&lt;span class="n"&gt;SDA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;、串列、多主控（&lt;/span&gt;&lt;span class="n"&gt;multi&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="err"&gt;）介面標準，具有匯流排仲裁機制，非常適合在器件之間進行近距離、非經常性的資料通信。在它的協定體系中，傳輸資料時都會帶上目的設備的設備位址，因此可以實現設備組網。&lt;/span&gt;
 &lt;span class="err"&gt;如果用通用&lt;/span&gt;&lt;span class="n"&gt;IO&lt;/span&gt;&lt;span class="err"&gt;口類比&lt;/span&gt;&lt;span class="n"&gt;I2C&lt;/span&gt;&lt;span class="err"&gt;匯流排，並實現雙向傳輸，則需一個輸入輸出口&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SDA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;，另外還需一個輸出口&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SCL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;。（注：&lt;/span&gt;&lt;span class="n"&gt;I2C&lt;/span&gt;&lt;span class="err"&gt;資料瞭解得比較少，這裡的描述可能很不完備）&lt;/span&gt;

 &lt;span class="n"&gt;UART&lt;/span&gt;&lt;span class="err"&gt;匯流排是非同步串口，因此一般比前兩種同步串口的結構要複雜很多，一般由串列傳輸速率產生器&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;產生的串列傳輸速率等於傳輸串列傳輸速率的&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="err"&gt;倍&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;、&lt;/span&gt;&lt;span class="n"&gt;UART&lt;/span&gt;&lt;span class="err"&gt;接收器、&lt;/span&gt;&lt;span class="n"&gt;UART&lt;/span&gt;&lt;span class="err"&gt;發送器組成，硬體上由兩根線，一根用於發送，一根用於接收。&lt;/span&gt;
 &lt;span class="err"&gt;顯然，如果用通用&lt;/span&gt;&lt;span class="n"&gt;IO&lt;/span&gt;&lt;span class="err"&gt;口類比&lt;/span&gt;&lt;span class="n"&gt;UART&lt;/span&gt;&lt;span class="err"&gt;匯流排，則需一個輸入口，一個輸出口。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第三，從第二點明顯可以看出，SPI和UART可以實現全雙工，但I2C不行；&lt;/p&gt;
&lt;p&gt;第四，看看牛人們的意見吧！
     wudanyu：I2C線更少，我覺得比UART、SPI更為強大，但是技術上也更加麻煩些，因為I2C需要有雙向IO的支援，而且使用上拉電阻，我覺得抗干擾能力較弱，一般用於同一板卡上晶片之間的通信，較少用於遠距離通信。SPI實現要簡單一些，UART需要固定的串列傳輸速率，就是說兩位元資料的間隔要相等，而SPI則無所謂，因為它是有時鐘的協定。
     quickmouse：I2C的速度比SPI慢一點，協議比SPI複雜一點，但是連線也比標準的SPI要少。
SPI、I2C、UART三種串列匯流排協定的區別
     SPI(Serial Peripheral Interface：串列外設介面)
     I2C(INTER IC BUS)
     UART(Universal Asynchronous Receiver Transmitter：通用非同步收發器)&lt;/p&gt;
&lt;p&gt;[ SPI ] 
The SPI includes these distinctive features:
   Master mode and slave mode
   Bi-directional mode
   Slave select output
   Mode fault error flag with CPU interrupt capability
   Double-buffered data register
   Serial clock with programmable polarity and phase
    Control of SPI operation during wait mode&lt;/p&gt;
&lt;p&gt;SPI 有兩種模式，Normal Mode and Bidirectional Mode，包括以下幾根線：
SS      Slave Select
SCK    Serial Clock
MOSI Master Output, Slave Input
MISO Master Input, Slave Output&lt;/p&gt;
&lt;p&gt;MOMI Master Output, Master Input
SISO   Slave Input, Slave Output&lt;/p&gt;
&lt;p&gt;其中前四根線用於Normal Mode ，常用的也是4根線的Normal Mode 。 
MOSI
This pin is used to transmit data out of the SPI module when it is configured as a Master and receive data
when it is configured as Slave.
MISO
This pin is used to transmit data out of the SPI module when it is configured as a Slave and receive data
when it is configured as Master.
SS
This pin is used to output the select signal from the SPI module to another peripheral with which a data
transfer is to take place when its configured as a Masterand its used as an input to receive the slave select
signal when the SPI is configured as Slave.
SCK
This pin is used to output the clock with respect to which the SPI transfers data or receive clock in case of
Slave.&lt;/p&gt;
&lt;p&gt;SPI 是一種允許一個主設備啟動一個與從設備的同步通訊的協定，從而完成資料的交換。也就是SPI是一種規定好的通訊方式。這種通信方式的優點是佔用埠較少，一般4根就夠基本通訊了。同時傳送速率也很高。一般來說要求主設備要有SPI控制器（但可用類比方式），就可以與基於SPI的晶片通訊了。
    SPI 的通信原理很簡單，它需要至少4根線，事實上3根也可以。也是所有基於SPI的設備共有的，它們是SDI（資料登錄），SDO（資料輸出），SCK（時 鐘），CS（片選）。其中CS是控制晶片是否被選中的，也就是說只有片選信號為預先規定的使能信號時（高電位或低電位），對此晶片的操作才有效。這就允許 在同一匯流排上連接多個SPI設備成為可能。
     接下來就負責通訊的3根線了。通訊是通過資料交換完成的，這裡先要知道SPI是串列通訊協定，也就是說資料是一位元一位元的傳輸的。這就是SCK時鐘線存在的原 因，由SCK提供時鐘脈衝，SDI，SDO則基於此脈衝完成資料傳輸。資料輸出通過SDO線，資料在時鐘上沿或下沿時改變，在緊接著的下沿或上沿被讀取。 完成一位資料傳輸，輸入也使用同樣原理。這樣，在至少8次時鐘信號的改變（上沿和下沿為一次），就可以完成8位元資料的傳輸。
     要注意的是，SCK信號線只由主設備控制，從設備不能控制信號線。同樣，在一個基於SPI的設備中，至少有一個主控設備。
     這樣傳輸的特點：這樣的傳輸方式有一個優點，與普通的串列通訊不同，普通的串列通訊一次連續傳送至少8位元資料，而SPI允許資料一位元一位元的傳送，甚至允許暫停，因為SCK時鐘線由主控設備控制，當沒有時鐘跳變時，從設備不採集或傳送資料。也就是說，主設備通過對SCK時鐘線的控制可以完成對通訊的控制。
     SPI還是一個資料交換協議：因為SPI的資料登錄和輸出線獨立，所以允許同時完成資料的輸入和輸出。
     不同的SPI設備的實現方式不盡相同，主要是資料改變和採集的時間不同，在時鐘信號上沿或下沿採集有不同定義，具體請參考相關器件的文檔。&lt;/p&gt;
&lt;p&gt;[I2C] 
    只要求兩條匯流排線路：一條串列資料線SDA 一條串列時鐘線SCL
    每個連接到匯流排的器件都可以通過唯一的位址和一直存在的簡單的主機從機關係軟體設定位址主機可以作為主機發送器或主機接收器
    它是一個真正的多主機匯流排如果兩個或更多主機同時初始化資料傳輸可以通過衝突檢測和仲裁，防止資料被破壞
    串列的8 位元雙向資料傳輸位元速率在標準模式下可達100kbit/s 快速模式下可達400kbit/s 高速模式下可達3.4Mbit/s
    片上的濾波器可以濾去匯流排資料線上的毛刺波保證資料完整
    連接到相同匯流排的IC 數量只受到匯流排的最大電容400pF 限制&lt;/p&gt;
&lt;p&gt;[UART ]
UART匯流排是非同步串口，因此一般比前兩種同步串口的結構要複雜很多，一般由串列傳輸速率產生器(產生的串列傳輸速率等於傳輸串列傳輸速率的16倍)、UART接收器、UART發送器組成，硬體上由兩根線，一根用於發送，一根用於接收。
     顯然，如果用通用IO口類比UART匯流排，則需一個輸入口，一個輸出口。
UART常用於控制電腦與串列設備的晶片。有一點要注意的是，它提供了RS-232C資料終端設備介面，這樣電腦就可以和數據機或其它使用RS-232C介面的串列設備通信了。
明顯可以看出，SPI和UART可以實現全雙工，但I2C不行&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason</dc:creator><pubDate>Fri, 10 Oct 2014 13:50:49 +0800</pubDate><guid>tag:,2014-10-10:zhuan-spiuarti2cdu-you-shi-mo-qu-bie-ji-qi-ge-zi-de-te-dian.html</guid><category>Protocl</category></item><item><title>[轉] 本益比(PER)、股價淨值比(PBR)、股東權益報酬率(ROE)</title><link>/zhuan-ben-yi-bi-per-gu-jia-jing-zhi-bi-pbr-gu-dong-quan-yi-bao-chou-lu-roe.html</link><description>&lt;h3&gt;本益比(PER)&lt;/h3&gt;
&lt;p&gt;本益比是企業在一特定的時間，計算股價(本)相對於盈餘(益)的比值。&lt;/p&gt;
&lt;p&gt;本益比(PER) = 每股市價 / 每股盈餘(EPS) ；計算出的單位是倍&lt;/p&gt;
&lt;p&gt;其中每股盈餘(EPS)是指 公司淨利 / 公司所發行的股數，EPS是衡量企業經營績效的財務指標之一。&lt;/p&gt;
&lt;p&gt;本益比的價值在於，假設企業的獲利保持不變，原投資(購買股票)金額，要幾年才可以回收。例如：本益比算出來為10，表示說所投資的錢10後本金可以回收。從此角度來看本益比當然越低越好。不過實際操作上，衡量本益比有ㄧ些參考準則：
1. 本益比 vs 整個市場
2. 本益比 vs 同業的本益比
3. 現在的本益比 vs 過去的本益比
4. 現在的本益比 vs 合理本益比 
其中第4點，合理本益比，是拿利率來做為比較，一搬來說，合理本益比應為利率的倒數，例如：年定存利率為2%時，合理本益比則為50，有就是說如果把錢放在銀行，必須要50年才可回收本金。&lt;/p&gt;
&lt;h3&gt;股價淨值比(PBR)&lt;/h3&gt;
&lt;p&gt;股價淨值比(PBR)是指企業於特定時間點的股價，相對於最近季底每股淨值的比值。&lt;/p&gt;
&lt;p&gt;股價淨值比(PBR) = 股票市值 / 每股淨值 ；(倍)&lt;/p&gt;
&lt;p&gt;其中每股淨值是指企業股票的每股股份真正的價值為多少：&lt;/p&gt;
&lt;p&gt;每股淨值 = (資產總額 - 負債總額) / 發行股數&lt;/p&gt;
&lt;p&gt;當企業營運不佳時，投資人不看好，股價淨值比(PBR)下滑，反之，營運成效良好，投資人有信心，股價淨值比(PBR)上漲，簡言之，股價淨值比(PBR)反應出投資人對於該股的信心指數，股價淨值比(PBR)也可說是各股的人氣指數。&lt;/p&gt;
&lt;p&gt;實際操作上，可以拿個股的每股淨值 乘上 同類股的一般PBR，計算出合理的股價。股市分析中，常可聽到「建議操作區間」，這區間就是由PBR算出來合理的股價，超出合理股價區間的上限，稱之超漲，低於合理股價區間的下限，稱之超跌。&lt;/p&gt;
&lt;p&gt;如何取得股價淨值比(PBR)
http://www.tse.com.tw =&amp;gt; 交易資訊 =&amp;gt; 個股日本益比、殖利率及股價淨值比 (依代碼查詢or日期查詢)&lt;/p&gt;
&lt;h3&gt;股東權益報酬率(ROE)&lt;/h3&gt;
&lt;p&gt;在了解股東權益報酬率(ROE)前，需先了解「股東權益」以及「平均股東權益」。&lt;/p&gt;
&lt;p&gt;股東權益是指股東擁有的公司淨值。&lt;/p&gt;
&lt;p&gt;股東權益 = 公司總資產 - 總負債&lt;/p&gt;
&lt;p&gt;平均股東權益是指在一段時間(通常為一年)股東權益的平均。&lt;/p&gt;
&lt;p&gt;平均股東權益 = (期初股東權益 + 期末股東權益) / 2&lt;/p&gt;
&lt;p&gt;最後，股東權益報酬率(ROE)，又稱淨值報酬率&lt;/p&gt;
&lt;p&gt;股東權益報酬率(ROE) = (稅後淨利 / 平均股東權益) * 100%&lt;/p&gt;
&lt;p&gt;股東權益報酬率(ROE)，所反映的事股東擁有的每一元可以享有的報酬率，換言之，股東權益報酬率(ROE)越穩定成長，表示該公司越有投資的價值。當然ROE也是重視「價值投資」的投資人觀察的重點。ROE越高，代表公司越能替股東賺錢。&lt;/p&gt;
&lt;p&gt;對於「價值投資」的投資人，選股時建議選擇PBR低以及ROE高的個股。&lt;/p&gt;
&lt;p&gt;by James
http://sclin0323.pixnet.net/blog/post/24993390-%E6%9C%AC%E7%9B%8A%E6%AF%94(per)%E3%80%81%E8%82%A1%E5%83%B9%E6%B7%A8%E5%80%BC%E6%AF%94(pbr)%E3%80%81%E8%82%A1%E6%9D%B1%E6%AC%8A%E7%9B%8A%E5%A0%B1%E9%85%AC&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason</dc:creator><pubDate>Sat, 04 Oct 2014 23:25:58 +0800</pubDate><guid>tag:,2014-10-04:zhuan-ben-yi-bi-per-gu-jia-jing-zhi-bi-pbr-gu-dong-quan-yi-bao-chou-lu-roe.html</guid><category>stock</category></item><item><title>Opencv 讀寫圖檔基本操作</title><link>/opencv-du-xie-tu-dang-ji-ben-cao-zuo.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#ifndef _OPENCV_H_&lt;/span&gt;
&lt;span class="cp"&gt;#define _OPENCV_H_&lt;/span&gt;

&lt;span class="cp"&gt;#include &amp;lt;opencv2/opencv.hpp&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef _WIN32&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef _DEBUG&lt;/span&gt;
&lt;span class="c1"&gt;//Debug   mode&lt;/span&gt;
&lt;span class="cp"&gt;#pragma comment(lib,&amp;quot;opencv_core231d.lib&amp;quot;)&lt;/span&gt;
&lt;span class="cp"&gt;#pragma comment(lib,&amp;quot;opencv_highgui231d.lib&amp;quot;)&lt;/span&gt;
&lt;span class="cp"&gt;#pragma comment(lib,&amp;quot;opencv_imgproc231d.lib&amp;quot;)&lt;/span&gt;
&lt;span class="cp"&gt;#pragma comment(lib,&amp;quot;opencv_video231d.lib&amp;quot;)&lt;/span&gt;
&lt;span class="cp"&gt;#pragma comment(lib,&amp;quot;opencv_ml231d.lib&amp;quot;)&lt;/span&gt;
&lt;span class="cp"&gt;#pragma comment(lib,&amp;quot;opencv_legacy231d.lib&amp;quot;)&lt;/span&gt;
&lt;span class="cp"&gt;#else&lt;/span&gt;
&lt;span class="c1"&gt;//Release   mode&lt;/span&gt;
&lt;span class="cp"&gt;#pragma comment(lib,&amp;quot;opencv_core231.lib&amp;quot;)&lt;/span&gt;
&lt;span class="cp"&gt;#pragma comment(lib,&amp;quot;opencv_highgui231.lib&amp;quot;)&lt;/span&gt;
&lt;span class="cp"&gt;#pragma comment(lib,&amp;quot;opencv_imgproc231.lib&amp;quot;)&lt;/span&gt;
&lt;span class="cp"&gt;#pragma comment(lib,&amp;quot;opencv_video231.lib&amp;quot;)&lt;/span&gt;
&lt;span class="cp"&gt;#pragma comment(lib,&amp;quot;opencv_ml231.lib&amp;quot;)&lt;/span&gt;
&lt;span class="cp"&gt;#pragma comment(lib,&amp;quot;opencv_legacy231.lib&amp;quot;)&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;span class="cp"&gt;#else&lt;/span&gt;
&lt;span class="c1"&gt;// other&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;

&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;private:&lt;/span&gt;
    &lt;span class="n"&gt;IplImage&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;imgp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IplImage&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;imgp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;imgp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IplImage&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;imgp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kr"&gt;inline&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;[](&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rowIndx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;imgp&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;imageData&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rowIndx&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;imgp&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;widthStep&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;RgbPixel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;RgbPixelFloat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;RgbPixelDouble&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RgbPixel&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;       &lt;span class="n"&gt;RgbImage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RgbPixelFloat&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;RgbImageFloat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;RgbPixelDouble&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;RgbImageDouble&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;BwImage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;            &lt;span class="n"&gt;BwImageInt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;          &lt;span class="n"&gt;BwImageFloat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;         &lt;span class="n"&gt;BwImageDouble&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;quot;opencv.h&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;FileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;lena.jpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;IplImage&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Orig_Image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="n"&gt;IplImage&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Modify_Image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 

    &lt;span class="n"&gt;Orig_Image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cvLoadImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FileName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CV_LOAD_IMAGE_COLOR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Modify_Image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;cvCreateImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cvGetSize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Orig_Image&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;IPL_DEPTH_8U&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Orig_Image&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Can not load image %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FileName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;cvShowImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Show Orig_Image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Orig_Image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;Modify_Image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cvCloneImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Orig_Image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;RgbImage&lt;/span&gt; &lt;span class="n"&gt;BlockA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Modify_Image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width=%d, height=%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Orig_Image&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Orig_Image&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;BlockA&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;BlockA&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;BlockA&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;cvShowImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Show Modify_Image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Modify_Image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;waitKey&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason</dc:creator><pubDate>Sat, 04 Oct 2014 18:58:10 +0800</pubDate><guid>tag:,2014-10-04:opencv-du-xie-tu-dang-ji-ben-cao-zuo.html</guid><category>opencv</category></item><item><title>函數無參數, 必須宣告為 void</title><link>/han-shu-wu-can-shu-bi-xu-xuan-gao-wei-void.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;stdio.h&amp;gt; &lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在 C語言中，可以給無參數的函數傳送任意型態的參數， 但是在 C++編譯器中編譯同樣的程式則會出錯
所以，無論在 C還是 C++中，若函數不接受任何參數，一定要指明參數為 void。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason</dc:creator><pubDate>Sat, 04 Oct 2014 18:43:55 +0800</pubDate><guid>tag:,2014-10-04:han-shu-wu-can-shu-bi-xu-xuan-gao-wei-void.html</guid><category>C</category></item><item><title>github 多個帳號ssh key</title><link>/github-duo-ge-zhang-hao-ssh-key.html</link><description>&lt;p&gt;場景：有多個github賬號，比如公司一個，私人一個。現在想在同一台主機上同時維護公司的和私人的repo
大家可能會嘗試把一個公鑰貼到兩個github賬戶，實踐告訴我們&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Key is already in use
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;解決辦法：&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;生成第二個key ssh-keygen -t rsa  -f ~/.ssh/id_rsa.est&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;編輯ssh_config vim ~/.ssh/config 粘貼下邊的東東：
Host estgit
HostName github.com
User git
IdentityFile "~/.ssh/id_rsa.est"
IdentitiesOnly yes
　&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;用這個方式來操作git：git clone estgit:/username/repo ，或者編輯 .git/config 裡邊的 remote - url&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;git：git clone estgit:/username/repo 中的 estgit 需要跟 ~/.ssh/config 裡面的 Host 名稱 estgit 一致&lt;/p&gt;
&lt;p&gt;用這個方式來操作git：git clone estgit:/username/repo ，或者編輯 .git/config 裡邊的 remote - url
原理就是，指定一個ssh的Host的單獨IdentityFile，然後因為git是基於ssh的，所以用Host名稱連接github.com就會用那個單獨的公鑰了。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason</dc:creator><pubDate>Sat, 27 Sep 2014 23:18:01 +0800</pubDate><guid>tag:,2014-09-27:github-duo-ge-zhang-hao-ssh-key.html</guid><category>github</category></item><item><title>資料傳輸速率計算</title><link>/zi-liao-chuan-shu-su-lu-ji-suan.html</link><description>&lt;p&gt;數據通信中用以描述資料傳輸速率有三個名詞：鮑速率(baud rate)、資料速率(data rate)、以及有效資料速率(effective data rate)。&lt;/p&gt;
&lt;h3&gt;(1) 鮑速率&lt;/h3&gt;
&lt;p&gt;鮑速率為傳每秒所送信號變化的次數，包括了頻率、相位、振幅以及它們的混合等型態的變化，可以用一個信號時距(Ts)來代表一個位元的傳輸時間，故鮑速率可寫成：
鮑速率 = 1 / Ts
例如某電傳系統中的鮑速率為1200鮑(baud)，則每傳送一個鮑需要0.83mS，若一個鮑僅調變一個位元，則鮑率與以下所講的資料速率相等。&lt;/p&gt;
&lt;h3&gt;(2) 資料速率&lt;/h3&gt;
&lt;p&gt;資料傳輸調變系統中若採用了混合調變或多位元調變，鮑速率已不足以代表資料傳輸速率，正確的計算應該是：
資料速率 = 鮑率 × 位元數 (bps)
舉例來說，某鮑速率為2400的調幅傳輸系統中，調幅階層變化有256種，表示它可以一次送出8個位元，因此資料速率為2400×8=19200 (bps)，bps就是每秒傳輸的位元數。&lt;/p&gt;
&lt;h3&gt;(3) 有效資料速率&lt;/h3&gt;
&lt;p&gt;串列傳輸時都會在資料串前後加入一些其他的訊息，有效資料速率是指扣除這些額外訊息後，實際傳輸資料的速率。
有效資料速率 =
資料速率 × 資料位元數 / 資料格式所有位元數
例如一個資料速率為19200 bps的系統以N/8/1非同步格式傳輸，那麼START、STOP各為1位元，資料為8位元，因此
有效資料速率 = 19200 × 8 / (1+8+1) = 15360 (bps)&lt;/p&gt;
&lt;p&gt;有效資料速率 = 19200 × 8 / (1+8+1) = 15360 (bps) // 這樣計算方式是因為處理一個8bit 實際上要花10bit 多了 start and stop , 所以 19200(bps) 實際上每秒只能處理 15360(bps)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;參考 http://www.ltivs.ilc.edu.tw/kocp/mpu/m7/m7-3-4.htm&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason</dc:creator><pubDate>Sat, 27 Sep 2014 00:37:54 +0800</pubDate><guid>tag:,2014-09-27:zi-liao-chuan-shu-su-lu-ji-suan.html</guid><category>protocol</category></item><item><title>安裝 OpenCV 2.4.9</title><link>/an-zhuang-opencv-249.html</link><description>&lt;h3&gt;install package&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install build-essential libgtk2.0-dev libjpeg-dev libtiff4-dev libjasper-dev libopenexr-dev cmake python-dev python-numpy python-tk libtbb-dev libeigen2-dev yasm libfaac-dev libopencore-amrnb-dev libopencore-amrwb-dev libtheora-dev libvorbis-dev libxvidcore-dev libx264-dev libqt4-dev libqt4-opengl-dev sphinx-common texlive-latex-extra libv4l-dev libdc1394-22-dev libavcodec-dev libavformat-dev libswscale-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;download opencv-2.4.9&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wget -O OpenCV-2.4.9.zip http://fossies.org/linux/misc/opencv-2.4.9.zip
unzip OpenCV-2.4.9.zip
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;build&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;opencv-2.4.9
mkdir debug ; &lt;span class="nb"&gt;cd &lt;/span&gt;debug
cmake -D &lt;span class="nv"&gt;CMAKE_INSTALL_PREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/opencv -D CMAKE_BUILD_TYPE:STRING&lt;span class="o"&gt;=&lt;/span&gt;RelWithDebInfo -D &lt;span class="nv"&gt;CMAKE_BUILD_TYPE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;DEBUG ..
make -j8 ; sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;add library path&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo vim /etc/ld.so.conf.d/opencv.conf
/usr/local/opencv/lib
sudo ldconfig
ldconfig -p | ag &lt;span class="s1"&gt;&amp;#39;opencv&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;bashrc configure&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;~/.bashrc
&lt;span class="nv"&gt;PKG_CONFIG_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$PKG_CONFIG_PATH&lt;/span&gt;:/usr/local/opencv/lib/pkgconfig
&lt;span class="nb"&gt;export &lt;/span&gt;PKG_CONFIG_PATH
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;test&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;opencv-2.4.9/samples/c
./build_all.sh
./facedetect lena.jpg
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason</dc:creator><pubDate>Fri, 26 Sep 2014 19:44:51 +0800</pubDate><guid>tag:,2014-09-26:an-zhuang-opencv-249.html</guid><category>opencv</category></item><item><title>使用Pelican建立Blog</title><link>/shi-yong-pelicanjian-li-blog.html</link><description>&lt;p&gt;1.1 安裝Pelican&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install virtualenv
virtualenv pelican_env
&lt;span class="nb"&gt;source &lt;/span&gt;pelican_env/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;安裝pelican工具&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install pelican markdown ghp-import
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;1.2 建立 Github Page
* 在Github上創建一個倉庫，倉庫名是用戶名.github.io，注意這裡的用戶名是自己的用戶名&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立好後，clone 到 local&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/xxxx/xxx.github.io
&lt;span class="nb"&gt;cd &lt;/span&gt;xxx.github.io
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.1 建立 Pelican Blog
建立 source branch&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git checkout -b &lt;span class="nb"&gt;source&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;建立 Pelican&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;建立的過程中，會問你一些問題，你可以參考下面的回答。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt; Where &lt;span class="k"&gt;do &lt;/span&gt;you want to create your new web site? &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; What will be the title of this web site? Buttermilch
&amp;gt; Who will be the author of this web site? Tony Stark
&amp;gt; What will be the default language of this web site? &lt;span class="o"&gt;[&lt;/span&gt;en&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to &lt;span class="nb"&gt;enable &lt;/span&gt;article pagination? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; How many articles per page &lt;span class="k"&gt;do &lt;/span&gt;you want? &lt;span class="o"&gt;[&lt;/span&gt;10&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; Do you want to generate a Fabfile/Makefile ... and publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP ... and site development? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using FTP? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using SSH? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using Dropbox? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using S3? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; 
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.1.1 安裝 theme 跟 plugins&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/jakevdp/pelican-octopress-theme.git
git clone https://github.com/getpelican/pelican-plugins.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;將 pelicanconf.py 檔案裡的 THEME 跟 PLUGIN_PATH 修改成你放置 pelican-octopress-theme 跟 pelican-plugins 的路徑：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;import os ＃ 新增
&lt;span class="nv"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; os.path.join&lt;span class="o"&gt;(&lt;/span&gt;os.environ.get&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;HOME&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;pelican&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%s/pelican-octopress-theme&amp;#39;&lt;/span&gt; % path
&lt;span class="nv"&gt;PLUGIN_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;%s/pelican-plugins&amp;#39;&lt;/span&gt; % path
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.2 建立Markdown文章&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Title: 你好，世界！
Date: 2014-09-26 16:08
Category: Python
Tags: python
Author: Jason
Summary: 你好，世界！
你好，世界，世界，你好。
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.3 Local test
編寫好了之後，就可以在本地進行測試了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pelican content -s pelicanconf.py --ignore-cache
&lt;span class="nb"&gt;cd &lt;/span&gt;output
python -m SimpleHTTPServer 1111
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.4 提交更改&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git add .
git commit -m &lt;span class="s2"&gt;&amp;quot;initial commit&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.5 發佈&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git branch gh-pages
ghp-import output
git checkout master
git merge gh-pages
git push --all
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.6 之後修改文章只需下面步驟即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git checkout &lt;span class="nb"&gt;source&lt;/span&gt;
新增修改文章
git add .
git commit -m &lt;span class="s2"&gt;&amp;quot;update&amp;quot;&lt;/span&gt;
ghp-import output
git checkout master
git merge gh-pages
git push --all
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason</dc:creator><pubDate>Fri, 26 Sep 2014 19:28:04 +0800</pubDate><guid>tag:,2014-09-26:shi-yong-pelicanjian-li-blog.html</guid><category>Pelican</category></item><item><title>SPI、I2C、I2S、UART、CAN、SDIO、GPIO的介绍</title><link>/spi-i2c-i2s-uart-can-sdio-gpiode-jie-shao.html</link><description>&lt;h3&gt;SPI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SPI(Serial Peripheral Interface)是MOTOROLA公司提出的同步串行總線方式。高速同步串行口。&lt;/li&gt;
&lt;li&gt;3~4線接口，收發獨立、可同步進行. &lt;/li&gt;
&lt;li&gt;因其硬件功能強大而被廣泛應用。在單片機組成的智能儀器和測控系統中。如果對速度要求不高,採用SPI總線模式是個不錯的選擇。它可以節省I/O端口,提高外設的數目和系統的性能。標準SPI總線由四根線組成：串行時鐘線(SCK)、主機輸入/從機輸出線(MISO)。主機輸出/從機輸入線(MOSI)和片選信號(CS)。有的SPI接口芯片帶有中斷信號線或沒有MOSI。
    SPI總線由三條信號線組成：串行時鐘(SCLK)、串行數據輸出(SDO)、串行數據輸入(SDI)。SPI總線可以實現多個SPI設備互相連接。提供SPI串行時鐘的SPI設備為SPI主機或主設備(Master)，其他設備為SPI從機或從設備(Slave)。主從設備間可以實現全雙工通信，當有多個從設備時，還可以增加一條從設備選擇線。如果用通用IO口模擬SPI總線，必須要有一個輸出口(SDO)，一個輸入口(SDI)，另一個口則視實現的設備類型而定，如果要實現主從設備，則需輸入輸出口，若只實現主設備，則需輸出口即可，若只實現從設備，則只需輸入口即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;I2C&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I2C: (Inter－Integrated Circuit)總線是一種由PHILIPS公司開發的兩線式串行總線，用於連接微控制器及其外圍設備.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I2C總線用兩條線(SDA和SCL)在總線和裝置之間傳遞信息，在微控制器和外部設備之間進行串行通訊或在主設備和從設備之間的雙向數據傳送。I2C是OD輸出的，大部分I2C都是2線的（時鐘和數據），一般用來傳輸控制信號。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;I2C是多主控總線，所以任何一個設備都能像主控器一樣工作，並控制總線。總線上每一個設備都有一個獨一無二的地址，根據設備它們自己的能力，它們可以作為發射器或接收器工作。多路微控制器能在同一個I2C總線上共存。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;I2S&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I2S（Inter-IC Sound Bus）是飛利浦公司為數字音頻設備之間的音頻 數據傳輸而制定的一種總線標準。 I2S則大部分是3線的（除了時鐘和數據外，還有一個左右聲道的選擇信號），I2S主要用來傳輸音頻信號。如STB、DVD、MP3等常用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;UART&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;UART：通用異步串行口。按照標準波特率完成雙向通訊，速度慢. &lt;/li&gt;
&lt;li&gt;UART總線是異步串口，因此一般比前兩種同步串口的結構要複雜很多，一般由波特率產生器(產生的波特率等於傳輸波特率的16倍)、UART接收器、UART發送器組成，硬件上由兩根線，一根用於發送，一根用於接收。&lt;/li&gt;
&lt;li&gt;UART是用於控制計算機與串行設備的芯片。有一點要注意的是，它提供了RS-232C數據終端設備接口，這樣計算機就可以和調制解調器或其它使用RS-232C接口的串行設備通信了 。作為接口的一部分，UART還提供以下功能： 
   將由計算機內部傳送過來的並行數據轉換為輸出的串行數據流。將計算機外部來的串行 
數據轉換為字節，供計算機內部使用並行數據的器件使用。在輸出的串行數據流中加入 
奇偶校驗位，並對從外部接收的數據流進行奇偶校驗。在輸出數據流中加入啟停標記， 
並從接收數據流中刪除啟停標記。處理由鍵盤或鼠標發出的中斷信號（鍵盤和鼠標也是 
串行設備）。可以處理計算機與外部串行設備的同步管理問題。有一些比較高檔的UART 
還提供輸入輸出數據的緩衝區，現在比較新的UART是16550，它可以在計算機需要處理數 
據前在其緩衝區內存儲16字節數據，而通常的UART是8250。現在如果您購買一個內置的 
調制解調器，此調制解調器內部通常就會有16550 UART。 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;GPIO&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GPIO (General Purpose Input Output 通用輸入/輸出)或總線擴展器利用工業標準I²C、SMBus™或SPI™接口簡化了I/O口的擴展。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;當微控制器或芯片組沒有足夠的I/O端口，或當系統 需要採用遠端串行通信或控制時，GPIO產品能夠提供額外的控制和監視功能。每個GPIO端口可通過軟件分別配置成輸入或輸出。Maxim的GPIO產品線包括8端口至28端口的GPIO，提供推挽式輸出或漏極開路輸出。提供微型3mm x 3mm QFN封裝。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;GPIO的優點(端口擴展器)
低功耗：GPIO具有更低的功率損耗(大約1μA，μC的工作電流則為100μA)。
集成IIC從機接口：GPIO內置IIC從機接口，即使在待機模式下也能夠全速工作。
小封裝：GPIO器件提供最小的封裝尺寸 ─ 3mm x 3mm QFN!
低成本：您不用為沒有使用的功能買單！
快速上市：不需要編寫額外的代碼、文檔，不需要任何維護工作！
靈活的燈光控制：內置多路高分辨率的PWM輸出。
可預先確定響應時間：縮短或確定外部事件與中斷之間的響應時間。
更好的燈光效果：匹配的電流輸出確保均勻的顯示亮度。
布線簡單：僅需使用2條IIC總線或3條SPI總線&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;SDIO&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SDIO是SD型的擴展接口，除了可以接SD卡外，還可以接支持SDIO接口的設備，插口的用途不止是插存儲卡。支持 SDIO接口的PDA，筆記本電腦等都可以連接象GPS接收器，Wi-Fi或藍牙適配器，調制解調器，局域網適配器，條型碼讀取器，FM無線電，電視接收 器，射頻身份認證讀取器，或者數碼相機等等採用SD標準接口的設備。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;CAN&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CAN，全稱為「Controller Area Network」，即控制器局域網，是國際上應用最廣泛的現場總線之一。最初，CAN被設計作為汽車環境中的微控制器通訊，在車載各電子控制裝置ECU之 間交換信息，形成汽車電子控制網絡。比如：發動機管理系統、變速箱控制器、儀表裝備、電子主幹系統中，均嵌入CAN控制裝置。
一個由CAN 總線構成的單一網絡中，理論上可以掛接無數個節點。實際應用中，節點數目受網絡硬件的電氣特性所限制。例如，當使用Philips P82C250作為CAN收發器時，同一網絡中允許掛接110個節點。CAN 可提供高達1Mbit/s的數據傳輸速率，這使實時控制變得非常容易。另外，硬件的錯誤檢定特性也增強了CAN的抗電磁干擾能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;什麼是CSMA/CD ?&lt;/h3&gt;
&lt;p&gt;CSMA/CD是「載波偵聽多路訪問/衝突檢測」（Carrier Sense Multiple Access with Collision Detect）的縮寫。
利 用CSMA訪問總線，可對總線上信號進行檢測，只有當總線處於空閒狀態時，才允許發送。利用這種方法，可以允許多個節點掛接到同一網絡上。當檢測到一個沖 突位時，所有節點重新回到『監聽』總線狀態，直到該衝突時間過後，才開始發送。在總線超載的情況下，這種技術可能會造成發送信號經過許多延遲。為了避免發 送時延，可利用CSMA/CD方式訪問總線。當總線上有兩個節點同時進行發送時，必須通過「無損的逐位仲裁」方法來使有最高優先權的的報文優先發送。在 CAN總線上發送的每一條報文都具有唯一的一個11位或29位數字的ID。CAN總線狀態取決於二進制數『0』而不是『1』，所以ID號越小，則該報文擁 有越高的優先權。因此一個為全『0』標誌符的報文具有總線上的最高級優先權。可用另外的方法來解釋：在消息衝突的位置，第一個節點發送0而另外的節點發送 1，那麼發送0的節點將取得總線的控制權，並且能夠成功的發送出它的信息。&lt;/p&gt;
&lt;p&gt;CAN的高層協議（也可理 解為應用層協議）是一種在現有的底層協議（物理層和數據鏈路層）之上實現的協議。高層協議是在CAN規範的基礎上發展起來的應用層。許多系統（像汽車工 業）中，可以特別制定一個合適的應用層，但對於
許多的行業來說，這種方法是不經濟的。一些組織已經研究並開放了應用層標準，以使系統的綜合應用變得十分容 易。
一些可使用的CAN高層協議有：
制定組織 主要高層協議
- CiA           CAL協議
- CiA           CANOpen協議
- DeviceNet 協議
- Honeywell  SDS 協議
- Kvaser       CANKingdom協議&lt;/p&gt;
&lt;p&gt;什麼是標準格式CAN和擴展格式CAN?
標準CAN的標誌符長度是11位，而擴展格式CAN的標誌符長度可達29位。CAN 協議的2.0A版本規定CAN控制器必須有一個11位的標誌符。同時，在2.0B版本中規定，CAN控制器的標誌符長度可以是11位或29位。遵循 CAN2.0B協議的CAN控制器可以發送和接收11位標識符的標準格式報文或29位標識符的擴展格式報文。如果禁止CAN2.0B,則CAN 控制器只能發送和接收11位標識符的標準格式報文，而忽略擴展格式的報文結構，但不會出現錯誤。
目前，Philips公司主要推廣的CAN獨立控制器均支持CAN2.0B協議，即支持29位標識符的擴展格式報文結構。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason</dc:creator><pubDate>Fri, 26 Sep 2014 18:48:28 +0800</pubDate><guid>tag:,2014-09-26:spi-i2c-i2s-uart-can-sdio-gpiode-jie-shao.html</guid><category>protocol</category></item><item><title>helper script</title><link>/helper-script.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c"&gt;# Author: Hsin-Yi Chen &amp;lt;ossug.hychen AT gmail.com&amp;gt;&lt;/span&gt;
&lt;span class="nv"&gt;ERRMSG_WRONGDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;You are not under octopress directory&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt; ! -f _config.yml &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;ERRMSG_WRONGDIR&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;

&lt;span class="nv"&gt;BLOGDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PWD&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;

deploy&lt;span class="o"&gt;(){&lt;/span&gt;
    git checkout &lt;span class="nb"&gt;source&lt;/span&gt;
&lt;span class="nb"&gt;    &lt;/span&gt;git push origin &lt;span class="nb"&gt;source&lt;/span&gt;
&lt;span class="nb"&gt;    &lt;/span&gt;rake generate
    rake deploy
&lt;span class="o"&gt;}&lt;/span&gt;

update_octopress&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;upgrading octopress source&amp;#39;&lt;/span&gt;
    git pull octopress master     &lt;span class="c"&gt;# Get the latest Octopress&lt;/span&gt;
    bundle install                &lt;span class="c"&gt;# Keep gems updated&lt;/span&gt;
    rake update_source            &lt;span class="c"&gt;# update the template&amp;#39;s source&lt;/span&gt;
    rake update_style             &lt;span class="c"&gt;# update the template&amp;#39;s style&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

preview&lt;span class="o"&gt;(){&lt;/span&gt;
    rake preview &amp;amp;
    sleep 1
    sensible-browser 127.0.0.1:4000
&lt;span class="o"&gt;}&lt;/span&gt;

upgrade&lt;span class="o"&gt;(){&lt;/span&gt;
    update_octopress
    deploy
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# start to write new post&lt;/span&gt;
&lt;span class="c"&gt;# @param: post title&lt;/span&gt;
post&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;requires title&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
    _new_item post &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# start to write new page&lt;/span&gt;
&lt;span class="c"&gt;# @param: page title&lt;/span&gt;
page&lt;span class="o"&gt;(){&lt;/span&gt;
    _new_item page &lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

_new_item&lt;span class="o"&gt;(){&lt;/span&gt;
    &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;tmpfile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;mktemp&lt;span class="sb"&gt;`&lt;/span&gt;
    &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;item_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;requires item name&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;2&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;requires title&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
    rake new_&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;item_name&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\&amp;quot;${title}\&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; | tee &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;tmpfile&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;local &lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;cat &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;tmpfile&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; | awk -F: &lt;span class="s1"&gt;&amp;#39;{print $2}&amp;#39;&lt;/span&gt; | sed -e &lt;span class="s1"&gt;&amp;#39;s/ //&amp;#39;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;
    sensible-editor &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;BLOGDIR&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/&lt;span class="nv"&gt;$file&lt;/span&gt;
    rm &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;tmpfile&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
    &lt;span class="c"&gt;# return file name&lt;/span&gt;
    &lt;span class="nv"&gt;RET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# Main&lt;/span&gt;
&lt;span class="c"&gt;# ----&lt;/span&gt;
&lt;span class="nv"&gt;actions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;post upgrade preview deploy&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;action&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;1&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;requirs action!, avaliabl actions are ${actions}&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;# run action&lt;/span&gt;
&lt;span class="nb"&gt;shift&lt;/span&gt;
&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;action&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason</dc:creator><pubDate>Thu, 25 Sep 2014 02:49:09 +0800</pubDate><guid>tag:,2014-09-25:helper-script.html</guid><category>python</category></item><item><title>sed 刪除空行</title><link>/sed-shan-chu-kong-xing.html</link><description>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sed&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;/^&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason</dc:creator><pubDate>Fri, 22 Aug 2014 16:08:00 +0800</pubDate><guid>tag:,2014-08-22:sed-shan-chu-kong-xing.html</guid><category>sed</category></item></channel></rss>